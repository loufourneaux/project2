# -*- coding: utf-8 -*-
"""neural_network_model.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1c5t3YPZYrPCI7GyjgeO094ft8aa7EEbH
"""
"""
import subprocess

# Installation on Google Colab
try:
    import os
    import google.colab
    subprocess.run(['python', '-m', 'pip', 'install', 'skorch', 'torchvision'])
    subprocess.run(['mkdir', '-p', 'datasets'])
    subprocess.run(['wget', '-nc', '--no-check-certificate', 'https://download.pytorch.org/tutorial/hymenoptera_data.zip', '-P', 'datasets'])
    subprocess.run(['unzip', '-u', 'datasets/hymenoptera_data.zip', '-d' 'datasets'])
except ImportError:
    pass

# @title
from google.colab import drive
drive.mount('/content/drive')
"""
import torch.nn as nn
import torch.optim as optim
import torch
from skorch.callbacks import EarlyStopping
from skorch import NeuralNetClassifier
from sklearn.model_selection import GridSearchCV
from sklearn.metrics import classification_report


class NeuralNetwork(nn.Module):
    def __init__(self, output_size, input_size=99, hidden_size1=64, hidden_size2=64):
        super(NeuralNetwork, self).__init__()
        self.layer1 = nn.Linear(input_size, hidden_size1)
        self.relu = nn.ReLU()
        self.layer2 = nn.Linear(hidden_size1, hidden_size2)
        self.layer3 = nn.Linear(hidden_size2, output_size)

        self.reset_parameters()
        self.outputsize = output_size
    def forward(self, x):
        x = self.layer1(x)
        x = self.relu(x)
        x = self.layer2(x)
        x = self.relu(x)
        x = self.layer3(x)
        return x

    def reset_parameters(self):
        for layer in self.children():
            if hasattr(layer, 'reset_parameters'):
                layer.reset_parameters()


def restart_nn_model(output_size, learning_rate=0.001):
    """

    :param learning_rate:
    :return:
    """

    model = NeuralNetwork(output_size)
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=learning_rate)


def train_nn_model(trainLoader, model, learning_rate=0.001, nbr_epoch=100):
    """

    :param trainLoader:
    :param learning_rate:
    :param number_epoch:
    :return:
    """
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=learning_rate)
    model.train()

    all_loss = []
    all_accuracy = []
    all_epoch = []

    for epoch in range(nbr_epoch):
        running_loss = 0.0
        total_train = 0
        correct_train = 0

        for inputs, labels in trainLoader:
            optimizer.zero_grad()
            outputs = model(inputs)
            loss = criterion(outputs, labels)
            loss.backward()
            optimizer.step()

            running_loss += loss.item()
            _, predicted = torch.max(outputs.data, 1)
            total_train += labels.size(0)
            correct_train += (predicted == labels).sum().item()

        epoch_loss = running_loss / len(trainLoader)
        epoch_accuracy = 100 * correct_train / total_train
        all_loss.append(epoch_loss)
        all_accuracy.append(epoch_accuracy)
        all_epoch.append(epoch + 1)
        print(f'Epoch {epoch + 1}, Loss: {epoch_loss:.4f}, Accuracy: {epoch_accuracy:.2f}%')
    return model, all_loss, all_accuracy, all_epoch


def test_nn_model(testLoader, model):
    """

    :param testLoader:
    :param model:
    :return:
    """
    model.eval()
    total_test = 0
    correct_test = 0

    y_true = []
    y_pred = []

    with torch.no_grad():
        for inputs, labels in testLoader:
            labels = labels.long()
            outputs = model(inputs)
            _, predicted = torch.max(outputs.data, 1)
            y_true.extend(labels.tolist())
            y_pred.extend(predicted.tolist())
            total_test += labels.size(0)
            correct_test += (predicted == labels).sum().item()

    test_accuracy = 100 * correct_test / total_test
    print(f'Accuracy on test set: {test_accuracy}%')
    print(classification_report(y_true, y_pred))


def tune_nn_hyperparameters(model, X_valid, y_valid, output_size, hidden_size1=64, hidden_size2=64, threshold=0.0001,
                            patience=5, max_epochs=50, cv=3,
                            verbose=1):
    """

    :param model:
    :param X_valid:
    :param y_valid:
    :param hidden_size1:
    :param hidden_size2:
    :param threshold:
    :param patience:
    :param max_epochs:
    :param cv:
    :param verbose:
    :return:
    """
    # parameters to tune
    """
    param_grid = {
        'module__hidden_size1': [4096, 2048],
        'module__hidden_size2': [512],
        'batch_size': [153, 150, 152, 151],
        'optimizer__lr': [0.001]
    }
    """
    param_grid = {
        'module__hidden_size1': [4096],
        'module__hidden_size2': [512],
        'batch_size': [151],
        'optimizer__lr': [0.001]
    }
    model.eval()
    print(model.outputsize)
    early_stopping = EarlyStopping(
        monitor='valid_loss',  # Change to 'valid_acc' for accuracy
        threshold=threshold,  # Define your threshold
        threshold_mode='rel',  # 'rel' for relative, 'abs' for absolute
        patience=patience  # Number of epochs to wait after condition is met
    )

    # Convert the PyTorch model to a skorch classifier to use in GridSearchCV
    classifier = NeuralNetClassifier(
        module=NeuralNetwork,
        module__hidden_size1=hidden_size1,  # Example values
        module__hidden_size2=hidden_size2,
        module__output_size=output_size,
        criterion=nn.CrossEntropyLoss,
        optimizer=optim.Adam,
        max_epochs=max_epochs,  # or choose an appropriate number of epochs
        callbacks=[early_stopping]
    )

    # Use GridSearchCV for hyperparameter tuning, cv for the number of folds in cross-validation, verbose for the explicit stage of tuning
    grid_search = GridSearchCV(estimator=classifier, param_grid=param_grid, scoring='accuracy', cv=cv, verbose=verbose)
    # get grid result
    grid_result = grid_search.fit(X_valid, y_valid)

    # Get the best hyperparameters
    best_hyperparams = grid_search.best_params_

    # get best score
    best_score = grid_search.best_score_

    return best_hyperparams, best_score
